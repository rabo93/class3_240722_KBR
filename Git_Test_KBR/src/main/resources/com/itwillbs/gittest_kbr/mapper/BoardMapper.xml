<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.gittest_kbr.mapper.BoardMapper">
	<!-- 게시물 등록 - INSERT -->
	<!-- 
	글번호(board_num) 컬럼이 일반 정수 컬럼이며 자동 증가 컬럼이 아니므로 직접 글번호 생성 필요
	이 때, 기존 게시물 번호 중 가장 큰 번호 조회 후 + 1 값을 새 글 번호와 참조글 번호로 사용
	=> 마이바티스의 INSERT, UPDATE 작업 과정(DELETE 제외)에서 
	   SELECT 구문 조회 결과값을 활용해야할 경우 <selectKey> 태그를 <insert> 등의 태그 내에서 사용하여
	   작업 전 또는 후에 특정 데이터 조회 수행 및 해당 값을 활용 가능
	   - keyProperty 속성 : 조회(SELECT) 결과 값을 저장할 속성명(VO 객체의 멤버변수명도 지정 가능)
	                        => 조회 후 자동으로 해당 객체의 변수(또는 일반 변수)에 결과값 저장됨
	                           ex) BoardVO 객체를 파라미터로 전달받았을 때 board_num 변수 지정 시
	                               해당 객체 내의 멤버변수 board_num 에 조회 결과값 저장됨
	   - resultType 속성 : 조회(SELECT) 결과에 대한 데이터타입(마이바티스에서 처리하는 타입)
	   - order 속성 : 작업 수행 시점(메인 작업 전 수행 시 BEFORE, 작업 후 수행 시 AFTER 선택)
	-->
	<insert id="insertBoard">
		<!-- 기존 게시물들 중 가장 큰 글번호(board_num) 조회 - SELECT -->
		<!-- 단, 조회 결과가 없을 경우 null 값 대신 0 이 기본값으로 설정되도록 처리 => IFNULL() 활용 -->
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0)
			FROM board
		</selectKey>
		
		<!-- selectKey 를 통해 조회된 글번호 + 1 값을 새 글 번호와 참조글 번호 값으로 사용 -->
		<!-- 이 때, keyProperty 에 지정한 이름을 변수처럼 활용 => #{board_num} -->
		INSERT
		INTO board
		VALUES (
			#{board_num} + 1     -- 글번호
			, #{board_name}
			, #{board_subject}
			, #{board_content}
			, #{board_file}      -- 다중 파일 업로드를 구현하지 않았지만 일단 INSERT 에 포함
			, #{board_file1}
			, #{board_file2}
			, #{board_file3}
			, #{board_num} + 1   -- 참조글번호(board_re_ref) => 새 글 번호와 동일한 값 사용
			, 0                  -- 들여쓰기레벨(board_re_lev) => 기본값 0
			, 0                  -- 글순서번호(board_re_seq) => 기본값 0
			, 0                  -- 조회수(board_readcount) => 기본값 0
			, now()              -- 작성일시
			, #{board_writer_ip} 
					
		)
	</insert>
	
	<!-- 게시물 목록 조회 - SELECT -->
	<!-- board 테이블의 전체 레코드 조회(startRow, listLimit 파라미터값을 LIMIT 절에 적용해서 갯수 제한) -->
<!-- 	<select id="selectBoardList" resultType="board"> -->
<!-- 		SELECT * -->
<!-- 		FROM board -->
<!-- 		ORDER BY -->
<!-- 			board_re_ref DESC -->
<!-- 			, board_re_seq ASC -->
<!-- 		LIMIT  -->
<!-- 			#{startRow}     -->
<!-- 			, #{listLimit}  -->
<!-- 	</select> -->
	
	<!-- 글 목록 조회 시 검색 기능 추가 -->
	<select id="selectBoardList" resultType="board">
		SELECT *
		FROM board
		
		<!-- 
		1. 검색어(searchKeyword)가 널스트링이 아닐 때 검색어를 추가하기 위한 WHERE 절 추가
		   => 검색어 데이터는 searchKeyword 변수에 저장되어 있음(@Param("searchKeyworkd))
		   => 자바 문법과 동일하게 equals() 메서드를 통해 문자열 비교 수행
		-->
		<if test="!searchKeyword.equals('')">
			WHERE
			<!-- 
			2. 검색타입(searchType)에 따른 WHERE 조건의 대상 컬럼명 변경하여 조건 작성
			   => searchType 변수의 문자열 비교(subject, content, subject_content, name)
			   => 경우의 수가 2개 이상이므로 <choose><when><otherwise> 사용
			-->
			<choose>
				<!-- 1) 제목으로 검색했을 경우 -->
				<when test="searchType.equals('subject')">
					<!-- 만약, '%#{searchKeyword}%' 형식으로 지정 시 오류 발생('%'검색어'%') -->
<!-- 					board_subject LIKE '%#{searchKeyword}%' -->

					<!-- '%${searchKeyword}%' 형식으로 지정 시 정상 동작('%검색어%') -->
<!-- 					board_subject LIKE '%${searchKeyword}%' -->
						
					<!-- CONCAT() 함수 활용하여 "%" 문자와 검색어 결합도 가능 -->
					<!-- 단, 이 경우에는 searchKeyword 데이터의 타입 감지가 필요하므로 # 사용 -->
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 2) 내용으로 검색했을 경우 -->
				<when test="searchType.equals('content')">
<!-- 					board_content LIKE '%${searchKeyword}%' -->
					board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 3) 제목&내용으로 검색했을 경우 -->
				<when test="searchType.equals('subject_content')">
					<!-- 제목&내용의 경우 제목 또는 내용 둘 중 하나의 조건만 일치하면 됨 - OR 활용 -->
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
					OR board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 4) 작성자로 검색했을 경우 -->
				<when test="searchType.equals('name')">
<!-- 					board_name LIKE '%${searchKeyword}%' -->
					board_name LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 5) 만약, searchType 값이 잘못된 값일 경우 -->
				<!--    WHERE 절은 무조건 추가되므로 조건을 무효화시키기 위해 -->
				<!--    항상 true 가 되는 조건식을 아무거나 작성하면 된다! -->
				<otherwise>
					1 = 1   -- 항상 true 가 되는 조건식
				</otherwise>
			</choose>
		</if>
		
		ORDER BY
			board_re_ref DESC
			, board_re_seq ASC
		LIMIT 
			#{startRow}    -- Mapper 내의 메서드에서 @Param("startRow") 로 지정한 파라미터명
			, #{listLimit} -- Mapper 내의 메서드에서 @Param("listLimit") 로 지정한 파라미터명
	</select>
	
	<!-- 전체 게시물 수 조회 - SELECT -->
<!-- 	<select id="selectBoardListCount" resultType="int"> -->
<!-- 		SELECT COUNT(*) -->
<!-- 		FROM board	 -->
<!-- 	</select> -->

	<!-- 검색 기능 추가를 위해 검색어에 따른 결과 게시물 수 조회 -->
	<select id="selectBoardListCount" resultType="int">
		SELECT COUNT(*)
		FROM board	
		<if test="!searchKeyword.equals('')">
			WHERE
			<choose>
				<when test="searchType.equals('subject')">
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('content')">
					board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('subject_content')">
					board_subject LIKE CONCAT('%', #{searchKeyword}, '%')
					OR board_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('name')">
					board_name LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<otherwise>
					1 = 1   -- 항상 true 가 되는 조건식
				</otherwise>
			</choose>
		</if>
		
	</select>
	
	
	<!-- 게시물 상세정보 조회 - SELECT -->
	<select id="selectBoard" resultType="board">
		Select *
		from board
		where board_num = #{board_num}
	</select>
	
	
	<!-- 게시물 조회수 증가 - UPDATE -->
	<!-- 
		글번호에 해당하는 레코드(게시물)의 조회수(board_readcount) 컬럼값 1 증가
		이 때, 증가된 조회수를 외부로 전달하기 위해 <selectKey> 태그 활용하여
		조회수 증가 작업 이후에 조회수값을 조회하여 BoardVO 객체에 board_readcount 멤버변수에 저장 필요
		=> 매퍼 메서드 파라미터로 BoardVO 객체를 전달받았을 경우 keyProperty 속성값으로 
			BoardVO 객체의 멤버변수명(board_readcount) 지정 시 조회 결과가 해당 멤버변수에 자동으로 저장됨
		=> BoardVO 객체를 BoardController 클래스부터 모두 공유중이므로 별도의 리턴없이도 객체값 공유 가능
	 -->
	<update id="updateReadcount">
		<selectKey keyProperty="board_readcount" resultType="int" order="AFTER">
			select board_readcount
			from board
			where board_num = #{board_num}
		</selectKey>
		update board
		set board_readcount = board_readcount + 1
		where board_num = #{board_num}
	</update>
	
	
	<!-- 게시물 삭제 - DELETE -->
	<delete id="deleteBoard">
		delete
		from board
		where board_num = #{board_num}
	</delete>
	
	
	<!-- 게시물 수정 - UPDATE 
		- 글 번호가 일치하는 레코드의 정보 수정
		- 제목/내용은 무조건 수정 대상
		- 단, 파일명 3개(board_fileX)중 비어있지 않은 파일명만 컬럼값을 수정
		  => 즉, 파일명 3개를 각각 비어있는지 판별 후 SET 절에 구문 추가
	-->
	<update id="updateBoard">
		update board
		set 
			board_subject = #{board_subject}
			, board_content = #{board_content}
			<if test="!board_file1.equals('')">
				, board_file1 = #{board_file1}		-- board_file1 UPDATE
			</if>
			<if test="!board_file2.equals('')">
				, board_file2 = #{board_file2}		-- board_file2 UPDATE
			</if>
			<if test="!board_file3.equals('')">
				, board_file3 = #{board_file3}		-- board_file3 UPDATE
			</if>
		where 
			board_num = #{board_num}
	</update>
	
	
	
	
	
	
	
	
	
</mapper>



















